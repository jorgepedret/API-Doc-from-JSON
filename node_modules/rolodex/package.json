{
  "name": "rolodex",
  "description": "Node account management system using redis",
  "version": "0.7.1",
  "author": {
    "name": "Brock Whitten",
    "email": "brock@sintaxi.com"
  },
  "keywords": [
    "redis",
    "account management",
    "users",
    "authentication"
  ],
  "main": "./rolodex.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha --ignore-leaks test/*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sintaxi/node-rolodex.git"
  },
  "dependencies": {
    "redis": "0.7.2",
    "bcrypt": "0.7.2",
    "node-uuid": "1.3.1",
    "validator": "0.2.8",
    "thug": "0.3.1"
  },
  "devDependencies": {
    "mocha": "0.10.2",
    "should": "0.5.1"
  },
  "engines": {
    "node": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/sintaxi/node-rolodex/master/README.md"
    }
  ],
  "readme": "# rolodex\n\n## Instalation\n\nI always recomend you bundle your dependencies with your application. To do\nthis, create a `package.json` file in the root of your project with the\nminimum information...\n\n    {\n      \"name\": \"yourapplication\",\n      \"version\": \"0.1.0\",\n      \"dependencies\": {\n        \"rolodex\": \"0.7.1\"\n      }\n    }\n\nThen run the following command using npm...\n\n    npm install\n\nOR, if you just want to start playing with the library run...\n\n    npm install rolodex\n\n## Docs\n\nTo create a rolodex object that gives us user management functions we must pass\nin our redis credentials to the redis server we wish to connect to.\n\n    var rolodex = require(\"rolodex\")(redisArgs)\n\nNow we have rolodex.account object that gives us account management functions.\n\n### Errors\n\nAnytime errors are accepted as the first argument of the callback it will\nreturn `null` if the request was successful and if there are validation\nerrors it will look like the following...\n\n    {\n      messages: [\n        \"Email must be unique\"\n        \"Password confirmation must match\"\n      ],\n      details: {\n        \"email\": \"must be unique\"\n        \"password\": \"confirmation must match\"\n      }\n    }\n\n### Account\n\nAccount Object looks like the following...\n\n    { \n      id: 'ojzg-su2w-kqsn',\n      uuid: 'b902b494-3392-4499-958b-2698b8ae411e',\n      email: 'brock@sintaxi.com',\n      email_verified_at: '2011-09-23T02:17:26.229Z',\n      updated_at: '2011-09-23T02:17:26.229Z',\n      created_at: '2011-09-23T02:17:26.228Z'\n    }\n\nThe account object gives you to basic functions `set` and `get`. The\n\n### account.set([identifier,] props, callback)\n\nIf an identifier is provied, the set will perform an update on that record.\nIf no identifier is profided, it will create the record.\n\n    rolodex.account.set({ \"email\": \"brock@sintaxi.com\" },\n      function(errors, account){\n        console.log(account)\n      }\n    )\n\n### account.get(identifier, callback)\n\n    rolodex.account.get(\"ojzg-su2w-kqsn\",\n      function(account){\n        console.log(account)\n      }\n    )\n\nThe following are possible values for identifier.\n\n  - account id (String). eg \"ojzg-su2w-kgsn\"\n  - uuid key value pair (Object). eg `{ uuid: \"fdc7af2d-f3c2-4475-bb1c-7a17caed3564\"}`  \n  - email key value pair (Object). eg `{ email: \"hey@man.com\"}`  \n\nEg. (find by params other than id)\n\n    rolodex.account.get({ \"email\": \"brock@sintaxi\" },\n      function(account){\n        console.log(account)\n      }\n    )\n\n### Account Creation\n\nThere is two ways to create an account...\n\n1) Provide a password and password\\_confirmation along with email. This would\nbe for your standard account registration paradigm.\n\n2) If you are creating the account with a previously verified email you can\nbypass the password requirement by passing in a `{ email_verified: true }`.\nThis is suitable when authentication was done via browserid or any other 3rd\nparty authentication system that requires an email verification step. If this\nstep is chosen, the `email_verified_at` timestamp will be set.\n\n\n## Roles\n\nRoles are arbitrary but this is the line of thinking when creating this lib.\n\n    0 - Owners\n    1 - Admin\n    2 - Dev\n    3 - Employee\n    4 - Mod\n    5 - Customer\n\n## License\n\nCopyright 2011/2012 Chloi Inc.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "rolodex@0.7.1",
  "dist": {
    "shasum": "d42ead0e3953ab6b58e7345bc9cc1fba502c177f"
  },
  "_from": "rolodex@0.7.1"
}
